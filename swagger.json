{
  "swagger": "2.0",
  "info": {
    "description": "Hospital Management Software Api Documentation",
    "version": "1.0.0",
    "title": "Hospital Management API",
    "contact": {
      "email": "ananioluwatobiloba2000@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "schemes": ["http"],
  "host": "localhost:3000",
  "basePath": "/api",
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "login a patient",
        "description": "patient login",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "summary": "Signup as a patient",
        "description": "To signup as a patient",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "dateOfBirth": {
                  "type": "string"
                },
                "gender":{
                  "type": "string"
                },
                "phoneNumber":{
                  "type": "string"
                },
                "height": {
                  "type": "string"
                },
                "weight": {
                  "type": "string"
                },
                "bloodGroup": {
                  "type": "string"
                },
                "genotype": {
                  "type": "string"
                },
                "occupation": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Patient Registration Successfully!",
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "500": {
            "description": "Could not register patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/search": {
      "get": {
        "summary": "Search for data",
        "description": "Search for firstname or lastname",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "search through firstname and lastname in db",
            "required": true,
            "schema": {
              "type": "query",
              "properties": {
                "name": {
                  "type": "string",
                  "$ref": "#/definitions/successResponse"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "search results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/all": {
      "get": {
        "summary": "Fetch all patients",
        "description": "Search for firstname or lastname",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "start is where the pagination starts default is 0",
            "required": false
          },
          {
            "in": "query",
            "name": "count",
            "description": " count is how many results it returns default is 20",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all patients successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/profile/me": {
      "get": {
        "summary": "returns full profile details",
        "description": "it is a protected route and it needs a patient token, and it returns all info about the patient",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Patient details fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/profile/:{id}": {
      "get": {
        "summary": "get a patient proflle by Id",
        "description": "ID - the unique uuid from the patient details, you can find the ID in the id column when the user login or signup ",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "params",
            "description": "profile id that needs to be fetched",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          }
        }
      }
    },
    "/patient/records/{patientId}": {
      "get": {
        "summary": "Fetch all Addmission Records for a patient",
        "description": "patientId - it is the patient unqiue uuid from the patient's id column, you can get the patientId when the user login or signup",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "description": "start is where the pagination starts default is 0",
            "required": false
          },
          {
            "in": "query",
            "name": "count",
            "description": "count is how many results it returns default is 20",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all admission records for a patient successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/profile/{:id}/edit": {
      "put": {
        "summary": "get a patient proflle by Id",
        "description": "id - it is the patient unqiue uuid from the patient's id column, you can get the patientId when the user login or signup",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "profile id that needs to be fetched",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "dateOfBirth": {
                  "type": "string"
                },
                "gender":{
                  "type": "string"
                },
                "phoneNumber":{
                  "type": "string"
                },
                "height": {
                  "type": "string"
                },
                "weight": {
                  "type": "string"
                },
                "bloodGroup": {
                  "type": "string"
                },
                "genotype": {
                  "type": "string"
                },
                "occupation": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          }
        }
      }
    },
    "/patient/admit/": {
      "post": {
        "summary": "Create a patient admission record",
        "description": "This route is to create a patient admission record",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "patientId": {
                  "type": "string"
                },
                "admittedOn": {
                  "type": "string"
                },
                "dischargedOn": {
                  "type": "string"
                },
                "roomNumber": {
                  "type": "string"
                },
                "bedNumber": {
                  "type": "string"
                },
                "isDischarged":{
                  "type": "boolean",
                  "defaultValue": "false"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Patient Admitted Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/admit/:{recordId}/update": {
      "put": {
        "summary": "update a patient admission record",
        "description": "This route is to update a patient admission record",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "admittedOn": {
                  "type": "string"
                },
                "dischargedOn": {
                  "type": "string"
                },
                "roomNumber": {
                  "type": "string"
                },
                "bedNumber": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Patient Admission Record Updated Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/admit/:{recordId}/delete": {
      "delete": {
        "summary": "delete a patient admission record",
        "description": "This route is to delete a patient admission record",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Patient Admission Record Deleted Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/admit/:{patientId}": {
      "get": {
        "summary": "get a patient admission record",
        "description": "This route is to get a patient admission record",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Patient Admission Record fetched Successfully!",
            "schema": {
                "$ref": "#/definitions/successResponse"
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/lab/report/create": {
      "post": {
        "summary": "Create a patient lab report",
        "description": "This route is to create a patient lab report",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "lab report details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "patientId": {
                  "type": "string"
                },
                "testName": {
                  "type": "string"
                },
                "result": {
                  "type": "string"
                },
                "testValue": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                },
                "document": {
                  "type": "string"
                }
              }
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Patient Lab Report Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            },
            "500": {
              "description": "Could not fetch patient",
              "schema": {
                "$ref": "#/definitions/serverFailure"
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          }
        }
      }
    }
  },
    "/lab/report/edit/:{reportId}": {
      "put": {
        "summary": "update a patient report record",
        "description": "This route is to update a patient report record",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "patientId": {
                  "type": "string"
                },
                "testName": {
                  "type": "string"
                },
                "result": {
                  "type": "string"
                },
                "testValue": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Patient Admission Record Updated Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/lab/report/:{reportId}": {
      "get": {
        "summary": "get a patient lab report",
        "description": "This route is to get a patient lab report",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Patient lab report fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/lab/report/:{patientId}/all": {
      "get": {
        "summary": "get all  lab report",
        "description": "This route is to get all lab reports for a patient",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Patient lab report fetched successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/login": {
      "post": {
        "summary": "admins and employee login route",
        "description": "This route can log in an admin and an employee",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient or admin details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log in Successful!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not login admin",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/admin/create": {
      "post": {
        "summary": "admin creates employee, Only Admin can access this route",
        "description": "**NOTE: specialty allows for only these values : doctor, nurse, lab technician, radiologist",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "firstname": {
                  "type": "string"
                },
                "lastname": {
                  "type": "string"
                },
                "specialty": {
                  "type": "string"
                },
                "dateOfBirth": {
                  "type": "string"
                },
                "gender": {
                  "type": "string"
                },
                "phoneNumber": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not create employee",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/admin/patient/delete/:{patientId}": {
      "delete": {
        "summary": "Note: Only admins can delete a patient",
        "description": "patientId - is the unique uuid in the id column",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Patient Deleted Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/details/update/:{employeeId}": {
      "put": {
        "summary": "Employee can update their profile",
        "description": "Only Employees can update their profile",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstname": {
                  "type": "string"
                },
                "lastname": {
                  "type": "string"
                },
                "dateOfBirth": {
                  "type": "string"
                },
                "gender": {
                  "type": "string"
                },
                "phoneNumber": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee Details Updated Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update employee details",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/all": {
      "get": {
        "summary": "get all employees",
        "description": "This route is to get all employees",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all empolyee successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/profile/me": {
      "get": {
        "summary": "get employee profile",
        "description": "This route is to get an employee's profile details",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "employee details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched profile successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/timeline/create": {
      "post": {
        "summary": "Employee can create patient timeline",
        "description": "Only Employees can create patient timeline, *** NOTE: document is a file",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient timeline details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "patientId":{
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "document": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timeline Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not create timeline",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/timeline/:{patientId}": {
      "get": {
        "summary": "Employee can get patient timeline",
        "description": "Only Employees can get patient timeline, NOTE: patientId - refers to the id from the patient",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient timeline details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all timelime successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch timeline",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/timeline/:{id}": {
      "delete": {
        "summary": "delete a timeline",
        "description": "This route is to a timeline, Note: id - this is from the timeline id",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Timeline Deleted Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not delete timeline",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/prescription/create": {
      "post": {
        "summary": "Employee can create patient prescription",
        "description": "Only Employees can create patient prescription",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient prescription details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "drugName": {
                  "type": "string"
                },
                "dosage": {
                  "type": "string"
                },
                "patientId": {
                  "type": "string"
                },
                "drugType": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string"
                },
                "period": {
                  "type": "string"
                },
                "note": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prescription Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not create prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/prescription/update/:{id}": {
      "put": {
        "summary": "Employee can update patient prescription",
        "description": "Only Employees can update patient prescription, NOTE: id - refers to the id from the prescription",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient prescription details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "drugName": {
                  "type": "string"
                },
                "dosage": {
                  "type": "string"
                },
                "drugType": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string"
                },
                "period": {
                  "type": "string"
                },
                "note": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prescription Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },"/employee/prescription/:{patientId}": {
      "get": {
        "summary": "Employee can get patient prescription",
        "description": "Only Employees can get patient prescription, NOTE: patientId - refers to the id from the patient",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient prescription details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all prescription successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/prescription/:{prescriptionId}/delete": {
      "delete": {
        "summary": "delete a patient prescription record",
        "description": "This route is to delete a patient prescription record",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Prescription Deleted Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/invoice/create": {
      "post": {
        "summary": "Doctors can create an invoice",
        "description": "Only doctors can create an invoice, NOTE: items only accept Array of objects",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient Invoice",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "series": {
                  "type": "string"
                },
                "No": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "patientId": {
                  "type": "string"
                },
                "items": {
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/invoice/:{patientId}": {
      "get": {
        "summary": "Doctor can get patient invoice",
        "description": "Doctor can get invoice, NOTE: patientId - refers to the id from the patient",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient invoice details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all invoice successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/invoice/:{patientId}": {
      "get": {
        "summary": "Patient can get their invoice",
        "description": "patient can get invoice, NOTE: patientId - refers to the id from the patient",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient invoice details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all invoice successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/invoice/delete/:{id}": {
      "delete": {
        "summary": "delete a patient invoice record",
        "description": "This route is to delete a patient invoice record, NOTE: id = id from the invoice",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Invoice Deleted Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not delete invoice",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/receipt/:{patientId}": {
      "get": {
        "summary": "Patient can get their receipt",
        "description": "patient can get receipt, NOTE: patientId - refers to the id from the patient",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient receipt details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all receipt successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/receipt/create": {
      "post": {
        "summary": "Doctors can create a receipt",
        "description": "Only doctors can create a receipt",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient receipt",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "series": {
                  "type": "string"
                },
                "No": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "paymentMode":{
                  "type": "string"
                },
                "patientId": {
                  "type": "string"
                },
                "items": {
                  "type": "object"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/receipt/delete/:{id}": {
      "delete": {
        "summary": "delete a patient receipt record",
        "description": "This route is to delete a patient receipt record, NOTE: id = id from the receipt",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Receipt Deleted Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not delete invoice",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/income": {
      "get": {
        "summary": "Fetch all income",
        "description": "",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "income fetched successfully",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all prescription successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/income/create": {
      "post": {
        "summary": "Doctors can create income",
        "description": "Only doctors can create income ** NOTE:- document is a file",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Income",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "incomeHead": {
                  "type": "string"
                },
                "invoiceNumber": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                },
                "document":{
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Income Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/income/{:id}/update": {
      "put": {
        "summary": "Doctors can update income",
        "description": "Only doctors can update income",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Income",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "incomeHead": {
                  "type": "string"
                },
                "invoiceNumber": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Income Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/patient/prescription/:{patientId}": {
      "get": {
        "summary": "Patient can get their prescription",
        "description": "Only patient can get prescription, NOTE: patientId - refers to the id from the patient",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "patient prescription details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all prescription successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update prescription",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/income/:{id}/delete": {
      "delete": {
        "summary": "delete n income record",
        "description": "",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Income Deleted Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/expense/create": {
      "post": {
        "summary": "Doctors can create expenses",
        "description": "Only doctors can create income ** NOTE:- document is a file",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Expenses",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "expensesHead": {
                  "type": "string"
                },
                "invoiceNumber": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                },
                "document":{
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expenses Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not create expense",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/expense": {
      "get": {
        "summary": "Fetch all expense",
        "description": "",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "fetched all expenses successfully",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetched all expenses successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not update expense",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/expense/:{id}/update": {
      "put": {
        "summary": "Doctors can create expenses",
        "description": "Only doctors can create income ** NOTE:- document is a file",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Expenses",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "expensesHead": {
                  "type": "string"
                },
                "invoiceNumber": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                },
                "document":{
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expenses Created Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not create expense",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },
    "/employee/expense/:{id}/delete": {
      "delete": {
        "summary": "delete an expense record",
        "description": "",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "Expense Deleted Successfully!",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch patient",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    },

    "/verify/token": {
      "get": {
        "summary": "verify a token",
        "description": "This route can verify all jwt tokens and returns the user data",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/successResponse"
              }
            }
          },
          "400": {
            "description": "Invalid parameters error",
            "schema": {
              "$ref": "#/definitions/failureResponse"
            }
          },
          "500": {
            "description": "Could not fetch expense",
            "schema": {
              "$ref": "#/definitions/serverFailure"
            }
          }
        }
      }
    }
  },
 
  "definitions": {
    "successResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array"
        }
      }
    },
    "failureResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "serverFailure": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}
